@page "/Users"
@page "/Users/All"
@layout MainLayoutUsers
@inject HttpClient http_client
@inject IJSRuntime js
@using CurrieTechnologies.Razor.SweetAlert2


<div class="row">
    <div class="col-md-12">
        <!-- Button trigger modal -->
        <button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modal_new_user">
            New User
        </button>
    </div>
</div>
<br />
<br />
<div class="row">
    <div class="col-md-12">

        <table class="table table-hover">
            <thead>
                <tr>
                    <th scope="col">Email</th>
                    <th scope="col">Action</th>
                </tr>
            </thead>
            <tbody>
                @if (users != null)
                {
                    @foreach (var user in users)
                    {
                        <tr>
                            <th scope="row">@user.email</th>
                            <td>
                                <span class="badge badge-danger" style="cursor:pointer" @onclick="@(async ()=> await ConfirmDeleteUser(user.id))">delete</span>
                                <span class="badge badge-success" style="cursor:pointer" @onclick="@(async ()=>await DisplayEditUser(user))">edit</span>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="2">
                            Loading...
                            <!--<div style="display:flex;align-content:center;justify-content:center;min-width:100%;">
                                <Loading isloading="@isloading" height="80" width="80" />
                            </div>-->
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<div class="modal fade" id="modal_new_user" tabindex="-1" role="dialog" aria-labelledby="modal_new_users" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">New User</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="system_user" OnValidSubmit="SubmitForm">

                <div class="modal-body">
                    <div class="form-group">
                        <label><span style="color:red">* </span>Email</label>
                        <input type="email" class="form-control" placeholder="Enter email" @bind="system_user.email" required>
                    </div>
                    <div class="form-group">
                        <label><span style="color:red">* </span>Password</label>
                        <input type="text" class="form-control" placeholder="Password@123" @bind="system_user.password" required>
                    </div>
                    <br />
                    <hr />
                    <p>Roles</p>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="custom-control custom-checkbox">
                                <input @onchange="@(e => { CheckRole("super_user", e); })" type="checkbox" value="super_user" checked="@(system_user.roles.Contains("super_user"))" />
                                <small>super_user</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="custom-control custom-checkbox">
                                <input @onchange="@(e => { CheckRole("business_partners", e); })" type="checkbox" value="business_partners" checked="@(system_user.roles.Contains("business_partners")||system_user.roles.Contains("super_user"))" />
                                <small>business_partners</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="custom-control custom-checkbox">
                                <input @onchange="@(e => { CheckRole("payroll", e); })" type="checkbox" value="payroll" checked="@(system_user.roles.Contains("payroll")||system_user.roles.Contains("super_user"))" />
                                <small>payroll</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="custom-control custom-checkbox">
                                <input @onchange="@(e => { CheckRole("fleet_management", e); })" type="checkbox" value="fleet_management" checked="@(system_user.roles.Contains("fleet_management")||system_user.roles.Contains("super_user"))" />
                                <small>fleet mgnt.</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="custom-control custom-checkbox">
                                <input @onchange="@(e => { CheckRole("users", e); })" type="checkbox" value="users" checked="@(system_user.roles.Contains("users")||system_user.roles.Contains("super_user"))" />
                                <small>users</small>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="custom-control custom-checkbox">
                                <input @onchange="@(e => { CheckRole("pos", e); })" type="checkbox" value="pos" checked="@(system_user.roles.Contains("pos")||system_user.roles.Contains("super_user"))" />
                                <small>pos</small>
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-4">
                            <div class="custom-control custom-checkbox">
                                <input @onchange="@(e => { CheckRole("tos", e); })" type="checkbox" value="tos" checked="@(system_user.roles.Contains("tos")||system_user.roles.Contains("super_user"))" />
                                <small>tos</small>
                            </div>
                        </div>
                    </div>

                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">
                        <Loading isloading="@isloading" />
                        Save
                    </button>
                </div>

            </EditForm>
        </div>
    </div>
</div>



<BlazoredToasts Position="ToastPosition.BottomCenter"
                Timeout="10"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-thumbs-up"
                ErrorIcon="fa fa-bug" />

<style>
    .blazored-toast-container {
        z-index: 9999999999;
    }
</style>



@code {
    //
    List<SystemUsers> users = null;
    bool isloading = false;
    //
    string modal_title = string.Empty;//title of the modal
    string modal_mode = string.Empty;//new or edit
                                     //
    public SystemUsers system_user;

    /// <summary>
    /// init
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await base.OnInitializedAsync();
            await ResetUser();
            if (!http_client.DefaultRequestHeaders.Contains("Authorization"))
            {
                http_client.DefaultRequestHeaders.Add("Authorization", $"Bearer {await GetAccessToken()}");
            }
            isloading = true;
            await FetchSystemUsers();
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
            Console.WriteLine(ex.StackTrace);
        }
        finally
        {
            isloading = false;
        }
    }

    /// <summary>
    /// get currenct user detail from local strorage
    /// </summary>
    public async Task<string> GetUserDetail(string detail)
    {
        var json = await local_storage.GetItemAsStringAsync("current_user");
        dynamic json_string = JsonConvert.DeserializeObject(json);
        var detail_string = json_string[detail];
        return detail_string;
    }

    /// <summary>
    /// fetch the access token from the localstorage
    /// </summary>
    /// <returns></returns>
    private async Task<string> GetAccessToken()
    {
        string access_token = await local_storage.GetItemAsync<string>("access_token");
        return access_token;
    }

    /// <summary>
    /// handles the check chnaged event for the roles
    /// </summary>
    /// <param name="role"></param>
    /// <param name="e"></param>
    public void CheckRole(string role, ChangeEventArgs e)
    {
        bool is_checked = bool.Parse(e.Value.ToString());
        if (role == "super_user" && is_checked)
        {
            //clear and add all roles
            system_user.roles.Clear();
            system_user.roles.Add("super_user");
            system_user.roles.Add("business_partners");
            system_user.roles.Add("payroll");
            system_user.roles.Add("fleet_management");
            system_user.roles.Add("users");
            system_user.roles.Add("pos");
            system_user.roles.Add("tos");
        }
        else if (role == "super_user" && !is_checked)
        {
            system_user.roles.Clear();//clear all roles
        }
        else
        {
            if (is_checked && !system_user.roles.Contains(role))
            {
                system_user.roles.Add(role);
            }
            else
            {
                system_user.roles.Remove(role);
            }
        }
        ///becomes super user if all are checked
        if (system_user.roles.Count >= 6 && !system_user.roles.Contains("super_user"))
        {
            system_user.roles.Add("super_user");
        }
        else
        {
            system_user.roles.Remove("super_user");
        }
    }

    /// <summary>
    /// fetch system user from server
    /// </summary>
    /// <returns></returns>
    protected async Task FetchSystemUsers()
    {

        var response1 = await http_client.GetAsync("/SystemUsers/Users");
        var response2 = await response1.Content.ReadAsStringAsync();
        dynamic json = JsonConvert.DeserializeObject(response2);
        if (json.res == "ok")
        {
            users = JsonConvert.DeserializeObject<List<SystemUsers>>(json.data.ToString());
        }
        else
        {
            toastService.ShowError(json.data.ToString());
        }
    }

    /// <summary>
    /// submit the form
    /// </summary>
    public async Task SubmitForm()
    {
        if (system_user.roles.Count == 0)
        {
            toastService.ShowError("User must have at least one role");
            return;
        }
        try
        {
            isloading = true;
            var string_content = new StringContent(JsonConvert.SerializeObject(system_user), System.Text.Encoding.UTF8, "application/json");
            var response1 = await http_client.PostAsync("/SystemUsers/Users", string_content);
            var response2 = await response1.Content.ReadAsStringAsync();
            dynamic json = JsonConvert.DeserializeObject(response2);
            if (json.res == "ok")
            {
                //reset user
                await ResetUser();
                toastService.ShowSuccess(json.data.ToString());
                await FetchSystemUsers();
            }
            else
            {
                toastService.ShowError(json.data.ToString());
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
        finally
        {
            isloading = false;
            await js.InvokeAsync<string>("showHideModal", new[] { "modal_new_user", "hide" });
        }
    }

    /// <summary>
    /// confirm delete this user
    /// </summary>
    /// <param name="user_id"></param>
    /// <returns></returns>
    async Task ConfirmDeleteUser(string user_id)
    {
        // async/await
        SweetAlertResult result = await Swal.FireAsync(new SweetAlertOptions
        {
            Title = "Delete this user?",
            //Type = SweetAlertType.Warning,
            ShowCancelButton = true,
            ConfirmButtonText = "Delete",
            CancelButtonText = "Cancel"
        });

        if (!string.IsNullOrEmpty(result.Value))
        {
            try
            {
                var response1 = await http_client.DeleteAsync($"/SystemUsers/Users/{user_id}");
                var response2 = await response1.Content.ReadAsStringAsync();
                dynamic json = JsonConvert.DeserializeObject(response2);
                if (json.res == "ok")
                {
                    toastService.ShowSuccess(json.data.ToString());
                    await FetchSystemUsers();
                }
                else
                {
                    toastService.ShowError(json.data.ToString());
                }
            }
            catch (Exception ex)
            {
                toastService.ShowError(ex.Message);
            }
        }

    }

    /// <summary>
    /// generate a new user
    /// </summary>
    async Task ResetUser()
    {
        system_user = new SystemUsers()
        {
            email = "user@company.com",
            password = "Password@123"
        };
        //await js.InvokeAsync<string>("showHideModal", new[] { "modal_new_user", "show" });
    }

    /// <summary>
    /// show the edit user form
    /// </summary>
    /// <param name="user"></param>
    /// <returns></returns>
    async Task DisplayEditUser(SystemUsers user)
    {
        system_user = user;
        await js.InvokeAsync<string>("showHideModal", new[] { "modal_new_user", "show" });
    }

}